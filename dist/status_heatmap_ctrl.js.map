{"version":3,"sources":["../src/status_heatmap_ctrl.js"],"names":["MetricsPanelCtrl","_","contextSrv","kbn","rendering","statusHeatmapOptionsEditor","ColorModeDiscrete","CANVAS","SVG","VALUE_INDEX","TIME_INDEX","panelDefaults","color","mode","cardColor","colorScale","exponent","colorScheme","defaultColor","thresholds","cards","cardMinWidth","cardVSpacing","cardHSpacing","cardRound","xAxis","show","showWeekends","minBucketWidthToShowWeekends","showCrosshair","labelFormat","yAxis","tooltip","legend","data","unitFormat","decimals","nullPointMode","yAxisSort","highlightCards","useMax","renderer","colorSchemes","name","value","invert","colorModes","opacityScales","StatusHeatmapCtrl","$scope","$injector","$rootScope","timeSrv","annotationsSrv","onRenderComplete","graph","chartWidth","renderingCompleted","calculateInterval","panelWidth","Math","ceil","$","window","width","panel","gridPos","w","max","minCardWidth","minSpacing","maxCardsCount","intervalMs","rangeMs","range","to","valueOf","from","discreteHelper","roundIntervalCeil","lowLimitMs","intervalOverride","interval","templateSrv","replace","scopedVars","datasource","slice","interval_to_ms","secondsToHms","issueQueries","annotationsPromise","getAnnotations","dashboard","datasourcePromises","then","onDataReceived","dataList","cardsData","convertToCards","loading","result","annotations","length","render","onInitEditMode","addEditorTab","unitFormats","getUnitFormats","onRender","multipleValues","noColorDefined","updateCardsValuesHasColorInfo","onCardColorChange","newColor","onDataError","postRefresh","onEditorAddThreshold","push","onEditorRemoveThreshold","index","splice","onEditorRemoveThresholds","onEditorAddThreeLights","onEditorAddSolarized","link","scope","elem","attrs","ctrl","xBucketSize","yBucketSize","maxValue","minValue","targets","targetIndex","map","d","i","target","concat","toArray","keys","datapoints","j","card","id","values","y","x","si","s","datapoint","min","defaultsDeep","dataWarnings","title","tip","events","on","templateUrl"],"mappings":"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","file":"status_heatmap_ctrl.js","sourcesContent":["import { MetricsPanelCtrl } from 'app/plugins/sdk';\r\nimport _ from 'lodash';\r\nimport { contextSrv } from 'app/core/core';\r\nimport kbn from 'app/core/utils/kbn';\r\n\r\nimport './color_legend';\r\nimport rendering from './rendering';\r\n// import aggregates, { aggregatesMap } from './aggregates';\r\n// import fragments, { fragmentsMap } from './fragments';\r\n// import { labelFormats } from './xAxisLabelFormats';\r\nimport {statusHeatmapOptionsEditor} from './options_editor';\r\nimport {ColorModeDiscrete} from \"./color_mode_discrete\";\r\n\r\nconst CANVAS = 'CANVAS';\r\nconst SVG = 'SVG';\r\nconst VALUE_INDEX = 0,\r\n      TIME_INDEX = 1;\r\n\r\nconst panelDefaults = {\r\n  // aggregate: aggregates.AVG,\r\n  // fragment: fragments.HOUR,\r\n  color: {\r\n    mode: 'spectrum',\r\n    cardColor: '#b4ff00',\r\n    colorScale: 'sqrt',\r\n    exponent: 0.5,\r\n    colorScheme: 'interpolateGnYlRd',\r\n    // discrete mode settings\r\n    defaultColor: '#757575',\r\n    thresholds: [] // manual colors\r\n  },\r\n  cards: {\r\n    cardMinWidth: 5,\r\n    cardVSpacing: 2,\r\n    cardHSpacing: 2,\r\n    cardRound: null\r\n  },\r\n  xAxis: {\r\n    show: true,\r\n    showWeekends: true,\r\n    minBucketWidthToShowWeekends: 4,\r\n    showCrosshair: true,\r\n    labelFormat: '%a %m/%d'\r\n  },\r\n  yAxis: {\r\n    show: true,\r\n    showCrosshair: false\r\n  },\r\n  tooltip: {\r\n    show: true\r\n  },\r\n  legend: {\r\n    show: true\r\n  },\r\n  data: {\r\n    unitFormat: 'short',\r\n    decimals: null\r\n  },\r\n  // how null points should be handled\r\n  nullPointMode: 'as empty',\r\n  yAxisSort: 'metrics',\r\n  highlightCards: true,\r\n  useMax: true\r\n};\r\n\r\nconst renderer = CANVAS;\r\n\r\nconst colorSchemes = [\r\n  // Diverging\r\n  { name: 'Spectral', value: 'interpolateSpectral', invert: 'always' },\r\n  { name: 'RdYlGn', value: 'interpolateRdYlGn', invert: 'always' },\r\n  { name: 'GnYlRd', value: 'interpolateGnYlRd', invert: 'always' },\r\n\r\n  // Sequential (Single Hue)\r\n  { name: 'Blues', value: 'interpolateBlues', invert: 'dark' },\r\n  { name: 'Greens', value: 'interpolateGreens', invert: 'dark' },\r\n  { name: 'Greys', value: 'interpolateGreys', invert: 'dark' },\r\n  { name: 'Oranges', value: 'interpolateOranges', invert: 'dark' },\r\n  { name: 'Purples', value: 'interpolatePurples', invert: 'dark' },\r\n  { name: 'Reds', value: 'interpolateReds', invert: 'dark' },\r\n\r\n  // Sequential (Multi-Hue)\r\n  { name: 'BuGn', value: 'interpolateBuGn', invert: 'dark' },\r\n  { name: 'BuPu', value: 'interpolateBuPu', invert: 'dark' },\r\n  { name: 'GnBu', value: 'interpolateGnBu', invert: 'dark' },\r\n  { name: 'OrRd', value: 'interpolateOrRd', invert: 'dark' },\r\n  { name: 'PuBuGn', value: 'interpolatePuBuGn', invert: 'dark' },\r\n  { name: 'PuBu', value: 'interpolatePuBu', invert: 'dark' },\r\n  { name: 'PuRd', value: 'interpolatePuRd', invert: 'dark' },\r\n  { name: 'RdPu', value: 'interpolateRdPu', invert: 'dark' },\r\n  { name: 'YlGnBu', value: 'interpolateYlGnBu', invert: 'dark' },\r\n  { name: 'YlGn', value: 'interpolateYlGn', invert: 'dark' },\r\n  { name: 'YlOrBr', value: 'interpolateYlOrBr', invert: 'dark' },\r\n  { name: 'YlOrRd', value: 'interpolateYlOrRd', invert: 'dark' }\r\n];\r\n\r\nlet colorModes = ['opacity', 'spectrum', 'discrete'];\r\nlet opacityScales = ['linear', 'sqrt'];\r\n\r\nexport class StatusHeatmapCtrl extends MetricsPanelCtrl {\r\n  static templateUrl = 'module.html';\r\n\r\n  /** @ngInject */\r\n  constructor($scope, $injector, $rootScope, timeSrv, annotationsSrv) {\r\n    super($scope, $injector);\r\n    _.defaultsDeep(this.panel, panelDefaults);\r\n\r\n    this.opacityScales = opacityScales;\r\n    this.colorModes = colorModes;\r\n    this.colorSchemes = colorSchemes;\r\n\r\n    // default graph width for discrete card width calculation\r\n    this.graph = {\r\n      \"chartWidth\" : -1\r\n    };\r\n\r\n    this.multipleValues = false;\r\n    this.noColorDefined = false;\r\n\r\n    this.discreteHelper = new ColorModeDiscrete($scope);\r\n\r\n    this.dataWarnings = {\r\n      \"noColorDefined\": {\r\n        title: 'Data has value with undefined color',\r\n        tip: 'Check metric values, color values or define a new color',\r\n      },\r\n      \"multipleValues\": {\r\n        title: 'Data has multiple values for one target',\r\n        tip: 'Change targets definitions or set \"use max value\"',\r\n      }\r\n    };\r\n\r\n    this.annotations = [];\r\n    this.annotationsSrv = annotationsSrv;\r\n\r\n    this.events.on('data-received', this.onDataReceived);\r\n    this.events.on('data-snapshot-load', this.onDataReceived);\r\n    this.events.on('data-error', this.onDataError);\r\n    this.events.on('init-edit-mode', this.onInitEditMode);\r\n    this.events.on('render', this.onRender);\r\n    this.events.on('refresh', this.postRefresh);\r\n    // custom event from rendering.js\r\n    this.events.on('render-complete', this.onRenderComplete);\r\n  }\r\n\r\n  onRenderComplete = (data) => {\r\n    this.graph.chartWidth = data.chartWidth;\r\n    this.renderingCompleted();\r\n  };\r\n\r\n  // override calculateInterval for discrete color mode\r\n  calculateInterval = () => {\r\n    let panelWidth = Math.ceil($(window).width() * (this.panel.gridPos.w / 24));\r\n    // approximate chartWidth because y axis ticks not rendered yet on first data receive.\r\n    let chartWidth = _.max([\r\n        panelWidth - 200,\r\n        panelWidth/2\r\n      ]);\r\n\r\n    let minCardWidth = this.panel.cards.cardMinWidth;\r\n    let minSpacing = this.panel.cards.cardHSpacing;\r\n    let maxCardsCount = Math.ceil((chartWidth-minCardWidth) / (minCardWidth + minSpacing));\r\n\r\n    let intervalMs;\r\n    let rangeMs = this.range.to.valueOf() - this.range.from.valueOf();\r\n\r\n    // this is minimal interval! kbn.round_interval will lower it.\r\n    intervalMs = this.discreteHelper.roundIntervalCeil(rangeMs / maxCardsCount);\r\n\r\n    // Calculate low limit of interval\r\n    let lowLimitMs = 1; // 1 millisecond default low limit\r\n    let intervalOverride = this.panel.interval;\r\n\r\n    // if no panel interval check datasource\r\n    if (intervalOverride) {\r\n      intervalOverride = this.templateSrv.replace(intervalOverride, this.panel.scopedVars);\r\n    } else if (this.datasource && this.datasource.interval) {\r\n      intervalOverride = this.datasource.interval;\r\n    }\r\n\r\n    if (intervalOverride) {\r\n      if (intervalOverride[0] === '>') {\r\n        intervalOverride = intervalOverride.slice(1);\r\n      }\r\n      lowLimitMs = kbn.interval_to_ms(intervalOverride);\r\n    }\r\n\r\n    if (lowLimitMs > intervalMs) {\r\n      intervalMs = lowLimitMs;\r\n    }\r\n\r\n    this.intervalMs = intervalMs;\r\n    this.interval = kbn.secondsToHms(intervalMs / 1000);\r\n  };\r\n\r\n  issueQueries = (datasource) => {\r\n    this.annotationsPromise = this.annotationsSrv.getAnnotations({\r\n      dashboard: this.dashboard,\r\n      panel: this.panel,\r\n      range: this.range,\r\n    });\r\n\r\n    /* Wait for annotationSrv requests to get datasources to\r\n     * resolve before issuing queries. This allows the annotations\r\n     * service to fire annotations queries before graph queries\r\n     * (but not wait for completion). This resolves\r\n     * issue 11806.\r\n     */\r\n    // 5.x before 5.4 doesn't have dataPromises\r\n    if (\"undefined\" !== typeof(this.annotationsSrv.datasourcePromises)) {\r\n      return this.annotationsSrv.datasourcePromises.then(r => {\r\n        return super.issueQueries(datasource);\r\n      });\r\n    } else {\r\n      return super.issueQueries(datasource);\r\n    }\r\n  }\r\n\r\n\r\n  onDataReceived = (dataList) => {\r\n    this.data      = dataList;\r\n    this.cardsData = this.convertToCards(this.data);\r\n\r\n    this.annotationsPromise.then(\r\n      result => {\r\n        this.loading = false;\r\n        //this.alertState = result.alertState;\r\n        if (result.annotations && result.annotations.length > 0) {\r\n          this.annotations = result.annotations;\r\n        } else {\r\n          this.annotations = null;\r\n        }\r\n        this.render();\r\n      },\r\n      () => {\r\n        this.loading = false;\r\n        this.annotations = null;\r\n        this.render();\r\n      }\r\n    );\r\n\r\n    //this.render();\r\n  };\r\n\r\n  onInitEditMode = () => {\r\n    this.addEditorTab('Options', statusHeatmapOptionsEditor, 2);\r\n    this.unitFormats = kbn.getUnitFormats();\r\n  };\r\n\r\n  onRender = () => {\r\n    if (!this.data) { return; }\r\n\r\n    this.multipleValues = false;\r\n    if (!this.panel.useMax) {\r\n      if (this.cardsData) {\r\n        this.multipleValues = this.cardsData.multipleValues;\r\n      }\r\n    }\r\n\r\n    this.noColorDefined = false;\r\n    if (this.panel.color.mode === 'discrete') {\r\n      this.discreteHelper.updateCardsValuesHasColorInfo();\r\n      if (this.cardsData) {\r\n        this.noColorDefined = this.cardsData.noColorDefined;\r\n      }\r\n    }\r\n  };\r\n\r\n  onCardColorChange = (newColor) => {\r\n    this.panel.color.cardColor = newColor;\r\n    this.render();\r\n  };\r\n\r\n  onDataError = () => {\r\n    this.data = [];\r\n    this.annotations = [];\r\n    this.render();\r\n  };\r\n\r\n  postRefresh = () => {\r\n    this.noColorDefined = false;\r\n  };\r\n\r\n  onEditorAddThreshold = () => {\r\n    this.panel.color.thresholds.push({ color: this.panel.defaultColor });\r\n    this.render();\r\n  };\r\n\r\n  onEditorRemoveThreshold = (index) => {\r\n    this.panel.color.thresholds.splice(index, 1);\r\n    this.render();\r\n  };\r\n\r\n  onEditorRemoveThresholds = () => {\r\n    this.panel.color.thresholds = [];\r\n    this.render();\r\n  };\r\n\r\n  onEditorAddThreeLights = () => {\r\n    this.panel.color.thresholds.push({color: \"red\", value: 2, tooltip: \"error\" });\r\n    this.panel.color.thresholds.push({color: \"yellow\", value: 1, tooltip: \"warning\" });\r\n    this.panel.color.thresholds.push({color: \"green\", value: 0, tooltip: \"ok\" });\r\n    this.render();\r\n  };\r\n  \r\n  /* https://ethanschoonover.com/solarized/ */\r\n  onEditorAddSolarized = () => {\r\n    this.panel.color.thresholds.push({color: \"#b58900\", value: 0, tooltip: \"yellow\" });\r\n    this.panel.color.thresholds.push({color: \"#cb4b16\", value: 1, tooltip: \"orange\" });\r\n    this.panel.color.thresholds.push({color: \"#dc322f\", value: 2, tooltip: \"red\" });\r\n    this.panel.color.thresholds.push({color: \"#d33682\", value: 3, tooltip: \"magenta\" });\r\n    this.panel.color.thresholds.push({color: \"#6c71c4\", value: 4, tooltip: \"violet\" });\r\n    this.panel.color.thresholds.push({color: \"#268bd2\", value: 5, tooltip: \"blue\" });\r\n    this.panel.color.thresholds.push({color: \"#2aa198\", value: 6, tooltip: \"cyan\" });\r\n    this.panel.color.thresholds.push({color: \"#859900\", value: 7, tooltip: \"green\" });\r\n    this.render();\r\n  }\r\n\r\n  link = (scope, elem, attrs, ctrl) => {\r\n    rendering(scope, elem, attrs, ctrl);\r\n  };\r\n\r\n  // group values into buckets by target\r\n  convertToCards = (data) => {\r\n    let cardsData = {\r\n      cards: [],\r\n      xBucketSize: 0,\r\n      yBucketSize: 0,\r\n      maxValue: 0,\r\n      minValue: 0,\r\n      multipleValues: false,\r\n      noColorDefined: false,\r\n      targets: [], // array of available unique targets\r\n      targetIndex: {} // indices in data array for each of available unique targets\r\n    };\r\n\r\n    if (!data || data.length == 0) { return cardsData;}\r\n\r\n    // Collect uniq timestamps from data and spread over targets and timestamps\r\n\r\n    // collect uniq targets and their indices\r\n    _.map(data, (d, i) => {\r\n      cardsData.targetIndex[d.target] = _.concat(_.toArray(cardsData.targetIndex[d.target]), i)\r\n    });\r\n\r\n    // TODO add some logic for targets heirarchy\r\n    cardsData.targets = _.keys(cardsData.targetIndex);\r\n    cardsData.yBucketSize = cardsData.targets.length;\r\n    // Maximum number of buckets over x axis\r\n    cardsData.xBucketSize = _.max(_.map(data, d => d.datapoints.length));\r\n\r\n    // Collect all values for each bucket from datapoints with similar target.\r\n    // TODO aggregate values into buckets over datapoint[TIME_INDEX] not over datapoint index (j).\r\n    for(let i = 0; i < cardsData.targets.length; i++) {\r\n      let target = cardsData.targets[i];\r\n\r\n      for (let j = 0; j < cardsData.xBucketSize; j++) {\r\n        let card = {\r\n          id: i*cardsData.xBucketSize + j,\r\n          values: [],\r\n          multipleValues: false,\r\n          noColorDefined: false,\r\n          y: target,\r\n          x: -1,\r\n        };\r\n\r\n        // collect values from all timeseries with target\r\n        for (let si = 0; si < cardsData.targetIndex[target].length; si++) {\r\n          let s = data[cardsData.targetIndex[target][si]];\r\n          if (s.datapoints.length <= j) {\r\n            continue;\r\n          }\r\n          let datapoint = s.datapoints[j];\r\n          if (card.values.length === 0) {\r\n            card.x = datapoint[TIME_INDEX];\r\n          }\r\n          card.values.push(datapoint[VALUE_INDEX]);\r\n        }\r\n        card.minValue = _.min(card.values);\r\n        card.maxValue = _.max(card.values);\r\n        if (card.values.length > 1) {\r\n          cardsData.multipleValues = true;\r\n          card.multipleValues = true;\r\n          card.value = card.maxValue; // max value by default\r\n        } else {\r\n          card.value = card.maxValue; // max value by default\r\n        }\r\n\r\n        if (cardsData.maxValue < card.maxValue)\r\n          cardsData.maxValue = card.maxValue;\r\n\r\n        if (cardsData.minValue > card.minValue)\r\n          cardsData.minValue = card.minValue;\r\n\r\n        if (card.x != -1) {\r\n        cardsData.cards.push(card);\r\n        }\r\n      }\r\n    }\r\n\r\n    return cardsData;\r\n  };\r\n}\r\n"]}